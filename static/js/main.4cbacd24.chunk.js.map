{"version":3,"sources":["DiceInput/DiceInput.tsx","Modifier/Modifier.tsx","Target/Target.tsx","ThreatRange/ThreatRange.tsx","AllRollResultsDisplay/AllRollResultsDisplay.tsx","ConfirmationRollsDisplay/ConfirmationRollsDisplay.tsx","Result/Result.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["DiceInput","numOfDice","handleDiceNumChange","type","value","onChange","Modifier","modifier","handleModifierChange","Target","target","handleTargetChange","ThreatRange","threatRange","handleThreatRangeChange","max","AllRollResultsDisplay","rawRoll","totalRoll","className","getClassName","ConfirmationRollsDisplay","Result","result","rollDice","useState","confirmationRolls","setConfirmationRolls","threats","criticalFailures","successes","failures","confirmations","forEach","n","resultDisplay","map","confirmationResults","length","onClick","App","setNumOfDice","setModifier","setTarget","setThreatRange","setResult","handleChange","fn","e","Number","currentTarget","i","resultArray","push","Math","floor","random","rollResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cbacd24.chunk.js","sourcesContent":["const DiceInput = ({\n  numOfDice,\n  handleDiceNumChange,\n}: {\n  numOfDice: number;\n  handleDiceNumChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div>\n      I want to roll{\" \"}\n      <input type=\"number\" value={numOfDice} onChange={handleDiceNumChange} />{\" \"}\n      d20s\n    </div>\n  );\n};\n\nexport default DiceInput;\n","const Modifier = ({\n  modifier,\n  handleModifierChange,\n}: {\n  modifier: number;\n  handleModifierChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div>\n      With a{\" \"}\n      <input type=\"number\" value={modifier} onChange={handleModifierChange} />{\" \"}\n      modifier\n    </div>\n  );\n};\n\nexport default Modifier;\n","const Target = ({\n  target,\n  handleTargetChange,\n}: {\n  target: number;\n  handleTargetChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div>\n      With a target of{\" \"}\n      <input type=\"number\" value={target} onChange={handleTargetChange} />\n    </div>\n  );\n};\n\nexport default Target;\n","const ThreatRange = ({\n  threatRange,\n  handleThreatRangeChange,\n}: {\n  threatRange: number;\n  handleThreatRangeChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  return (\n    <div>\n      And a threat range of{\" \"}\n      <input\n        type=\"number\"\n        value={threatRange}\n        max={20}\n        onChange={handleThreatRangeChange}\n      />{\" \"}\n      ({threatRange}-20)\n    </div>\n  );\n};\n\nexport default ThreatRange;\n","const AllRollResultsDisplay = ({\n  rawRoll,\n  totalRoll,\n  threatRange,\n  target,\n}: {\n  rawRoll: number;\n  totalRoll: number;\n  threatRange: number;\n  target: number;\n}) => {\n  const getClassName = (): string => {\n    let className = \"\";\n    switch (true) {\n      case rawRoll >= threatRange:\n        className = \"threat\";\n        break;\n      case rawRoll === 1:\n        className = \"criticalFailure\";\n        break;\n      case totalRoll >= target:\n        className = \"success\";\n        break;\n      case totalRoll < target:\n        className = \"failure\";\n        break;\n    }\n    return className;\n  };\n  return (\n    <div>\n      | <span className={getClassName()}>{totalRoll}</span> |\n    </div>\n  );\n};\n\nexport default AllRollResultsDisplay;\n","const ConfirmationRollsDisplay = ({\n  totalRoll,\n  rawRoll,\n  target,\n  threatRange,\n}: {\n  totalRoll: number;\n  rawRoll: number;\n  target: number;\n  threatRange: number;\n}) => {\n  const getClassName = (): string => {\n    let className = \"\";\n    switch (true) {\n      case rawRoll >= threatRange:\n        className = \"threat\";\n        break;\n      case rawRoll === 1 || totalRoll < target:\n        className = \"criticalFailure\";\n        break;\n      case totalRoll >= target:\n        className = \"success\";\n        break;\n    }\n    return className;\n  };\n\n  return (\n    <div>\n      <div>\n        | <span className={getClassName()}>{totalRoll}</span> |\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationRollsDisplay;\n","import { useState } from \"react\";\n\nimport AllRollResultsDisplay from \"../AllRollResultsDisplay/AllRollResultsDisplay\";\nimport ConfirmationRollsDisplay from \"../ConfirmationRollsDisplay/ConfirmationRollsDisplay\";\n\nconst Result = ({\n  result,\n  target,\n  threatRange,\n  modifier,\n  rollDice,\n}: {\n  result: number[];\n  target: number;\n  threatRange: number;\n  modifier: number;\n  rollDice: (n: number) => number[];\n}) => {\n  const [confirmationRolls, setConfirmationRolls] = useState<number[]>([]);\n  let threats = 0;\n  let criticalFailures = 0;\n  let successes = 0;\n  let failures = 0;\n  let confirmations = 0;\n\n  result.forEach((n) => {\n    switch (true) {\n      case n - modifier === 1:\n        criticalFailures += 1;\n        break;\n      case n - modifier >= threatRange:\n        threats += 1;\n        break;\n      case n >= target:\n        successes += 1;\n        break;\n      case n < target:\n        failures += 1;\n        break;\n    }\n  });\n\n  confirmationRolls.forEach((n) => {\n    switch (true) {\n      case n >= target || n - modifier >= threatRange:\n        confirmations += 1;\n    }\n  });\n\n  const resultDisplay = result.map((n) => (\n    <AllRollResultsDisplay\n      rawRoll={n - modifier}\n      totalRoll={n}\n      threatRange={threatRange}\n      target={target}\n    />\n  ));\n\n  const confirmationResults = confirmationRolls.map((n) => (\n    <ConfirmationRollsDisplay\n      rawRoll={n - modifier}\n      totalRoll={n}\n      target={target}\n      threatRange={threatRange}\n    />\n  ));\n  const handleClick = () => {\n    setConfirmationRolls(rollDice(threats));\n  };\n  return (\n    <>\n      <h2>Result:</h2>\n      <div className=\"resultContainer\">{resultDisplay}</div>\n      <div>\n        <em>Successes:</em> {successes}\n        <br />\n        <em>Failures:</em> {failures}\n        <br />\n        <em>Critical Failures:</em> {criticalFailures}\n        <br />\n        <em>Threats:</em> {threats}\n      </div>\n      {result.length > 0 && (\n        <div>\n          <button onClick={handleClick}>Roll Threat Confirmations</button>\n          <div className=\"resultContainer\">{confirmationResults}</div>\n          {confirmationRolls.length > 0 && (\n            <div>\n              <em>Confirmations:</em> {confirmations}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Result;\n","import React, { ReactChild, useState } from \"react\";\nimport \"./App.css\";\nimport DiceInput from \"./DiceInput/DiceInput\";\nimport Modifier from \"./Modifier/Modifier\";\nimport Target from \"./Target/Target\";\nimport ThreatRange from \"./ThreatRange/ThreatRange\";\nimport Result from \"./Result/Result\";\n\nconst App = (): ReactChild => {\n  const [numOfDice, setNumOfDice] = useState<number>(1);\n  const [modifier, setModifier] = useState<number>(0);\n  const [target, setTarget] = useState<number>(0);\n  const [threatRange, setThreatRange] = useState<number>(20);\n  const [result, setResult] = useState<number[]>([]);\n\n  const handleChange =\n    (fn: (e: number) => void) => (e: React.ChangeEvent<HTMLInputElement>) =>\n      fn(Number(e.currentTarget.value));\n\n  const rollDice = (numOfDice: number): number[] => {\n    let i = 0;\n    const resultArray: number[] = [];\n    while (i < numOfDice) {\n      resultArray.push(Math.floor(Math.random() * 20) + 1 + modifier);\n      i++;\n    }\n    return resultArray;\n  };\n\n  const rollResult: number[] = rollDice(numOfDice);\n\n  const handleClick = () => {\n    setResult(rollResult);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"inputsContainer\">\n        <DiceInput\n          numOfDice={numOfDice}\n          handleDiceNumChange={handleChange(setNumOfDice)}\n        />\n        <Modifier\n          modifier={modifier}\n          handleModifierChange={handleChange(setModifier)}\n        />\n        <Target target={target} handleTargetChange={handleChange(setTarget)} />\n        <ThreatRange\n          threatRange={threatRange}\n          handleThreatRangeChange={handleChange(setThreatRange)}\n        />\n      </div>\n      <button onClick={handleClick}>Roll</button>\n      <Result\n        result={result}\n        target={target}\n        threatRange={threatRange}\n        modifier={modifier}\n        rollDice={rollDice}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}